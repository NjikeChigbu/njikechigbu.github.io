mapboxgl.accessToken = 'pk.eyJ1Ijoibmppa2VjIiwiYSI6ImNscmdmdmZqcTAxb2kyam1rNTl1N2wzemgifQ.66TD2YnVptsfg1ybTTn4jg';
const map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/njikec/clzdkzkls00cl01qq8apb29ap',
    projection: 'globe', // Display the map as a globe, since satellite-v9 defaults to Mercator
    zoom: 12,
    center: [7.354, 5.1196]
});

map.addControl(new mapboxgl.NavigationControl());
map.scrollZoom.disable();

map.on('style.load', () => {
    map.setFog({}); // Set the default atmosphere style
});

// The following values can be changed to control rotation speed:

// At low zooms, complete a revolution every two minutes.
const secondsPerRevolution = 240;
// Above zoom level 5, do not rotate.
const maxSpinZoom = 5;
// Rotate at intermediate speeds between zoom levels 3 and 5.
const slowSpinZoom = 3;

let userInteracting = false;
const spinEnabled = true;

function spinGlobe() {
    const zoom = map.getZoom();
    if (spinEnabled && !userInteracting && zoom < maxSpinZoom) {
        let distancePerSecond = 360 / secondsPerRevolution;
        if (zoom > slowSpinZoom) {
            // Slow spinning at higher zooms
            const zoomDif =
                (maxSpinZoom - zoom) / (maxSpinZoom - slowSpinZoom);
            distancePerSecond *= zoomDif;
        }
        const center = map.getCenter();
        center.lng -= distancePerSecond;
        // Smoothly animate the map over one second.
        // When this animation is complete, it calls a 'moveend' event.
        map.easeTo({ center, duration: 1000, easing: (n) => n });
    }
}

// Pause spinning on interaction
map.on('mousedown', () => {
    userInteracting = true;
});
map.on('dragstart', () => {
    userInteracting = true;
});

// When animation is complete, start spinning if there is no ongoing interaction
map.on('moveend', () => {
    spinGlobe();
});

spinGlobe();

// Add highlight feature and change cursor to pointer on hover
map.on('mouseenter', 'abafillingstations', () => {
    map.getCanvas().style.cursor = 'pointer';
});
map.on('mouseleave', 'abafillingstations', () => {
    map.getCanvas().style.cursor = '';
});
map.on('mouseenter', 'abaemergencyservices', () => {
    map.getCanvas().style.cursor = 'pointer';
});
map.on('mouseleave', 'abaemergencyservices', () => {
    map.getCanvas().style.cursor = '';
});

map.on('click', 'abafillingstations', (e) => {
    const coordinates = e.features[0].geometry.coordinates.slice();
    const name = e.features[0].properties.Name;
    const rskCat = e.features[0].properties.RskCat;

    // Remove any existing highlight layer
    if (map.getLayer('highlight')) {
        map.removeLayer('highlight');
        map.removeSource('highlight');
    }

    // Add highlight layer
    map.addSource('highlight', {
        type: 'geojson',
        data: {
            type: 'Feature',
            geometry: {
                type: 'Point',
                coordinates: coordinates
            }
        }
    });

    map.addLayer({
        id: 'highlight',
        type: 'circle',
        source: 'highlight',
        paint: {
            'circle-radius': 10,
            'circle-color': 'yellow',
            'circle-opacity': 0.3
        }
    });

    new mapboxgl.Popup()
        .setLngLat(coordinates)
        .setHTML(`<strong>FILLING STATIONS</strong><br/>Name: ${name}<br/>Risk Score Category: ${rskCat}`)
        .addTo(map);
});

map.on('click', 'abaemergencyservices', (e) => {
    const coordinates = e.features[0].geometry.coordinates.slice();
    const type = e.features[0].properties.Type;
    const description = e.features[0].properties.Description;

    // Remove any existing highlight layer
    if (map.getLayer('highlight')) {
        map.removeLayer('highlight');
        map.removeSource('highlight');
    }

    // Add highlight layer
    map.addSource('highlight', {
        type: 'geojson',
        data: {
            type: 'Feature',
            geometry: {
                type: 'Point',
                coordinates: coordinates
            }
        }
    });

    map.addLayer({
        id: 'highlight',
        type: 'circle',
        source: 'highlight',
        paint: {
            'circle-radius': 10,
            'circle-color': 'yellow',
            'circle-opacity': 0.3
        }
    });

    new mapboxgl.Popup()
        .setLngLat(coordinates)
        .setHTML(`<strong>EMERGENCY SERVICES</strong><br/>Type: ${type}<br/>Description: ${description}`)
        .addTo(map);
});
